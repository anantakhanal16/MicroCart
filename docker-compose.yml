version: '3.8'

networks:
  backend:

services:
  ### --- MS SQL for Customer ---
  customerdb:
    container_name: customerdb
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=yourStrong(!)Password
    networks:
      - backend
    ports:
      - "1434:1433"

  customerwebapi:
    container_name: customerwebapi
    image: ${DOCKER_REGISTRY-}customerwebapi
    build:
      context: .
      dockerfile: CustomerWebApi/Dockerfile
    environment:
      - DB_HOST=customerdb
      - DB_NAME=CustomerDb
      - DB_SA_PASSWORD=yourStrong(!)Password
    networks:
      - backend
    ports:
      - "8080:8080"
      - "8081:8081"  # gRPC endpoint

  ### --- MySQL for Product ---
  productdb:
    container_name: productdb
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=yourStrong(!)Password
      - MYSQL_DATABASE=ProductDb
    networks:
      - backend
    ports:
      - "3307:3306"

  productapi:
    container_name: productapi
    image: ${DOCKER_REGISTRY-}productapi
    build:
      context: .
      dockerfile: ProductApi/Dockerfile
    environment:
      - DB_HOST=productdb
      - DB_PORT=3306
      - DB_NAME=ProductDb
      - DB_USER=root
      - DB_PASSWORD=yourStrong(!)Password
    networks:
      - backend
    ports:
      - "8082:8080"

  ### --- MongoDB for Order ---
  orderdb:
    container_name: orderdb
    image: mongo:7.0
    ports:
      - "27018:27017"
    networks:
      - backend
    volumes:
      - orderdata:/data/db

  orderapi:
    container_name: orderapi
    image: ${DOCKER_REGISTRY-}orderapi
    build:
      context: .  
      dockerfile: OrderApi/Dockerfile
    environment:
      - MONGO_HOST=orderdb
      - MONGO_PORT=27017
      - MONGO_DATABASE=OrderDb
      - CUSTOMER_GRPC_HOST=customerwebapi
      - CUSTOMER_GRPC_PORT=8081
    networks:
      - backend
    ports:
      - "8083:8080"

volumes:
  orderdata:
